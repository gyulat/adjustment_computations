% gama-local adjustment results for GNU Octave (.m script)
%
% version    1.02
% gama-local 2.33
%
% https://www.gnu.org/software/octave/
% https://www.gnu.org/software/gama/
%


% General adjustment parameters
%

unknowns        = 18;
observations    = 43;

adjusted_xyz    = 0;
adjusted_xy     = 6;
adjusted_z      = 0;
constrained_xyz = 0;
constrained_xy  = 6;
constrained_z   = 0;
fixed_xyz       = 0;
fixed_xy        = 0;
fixed_z         = 0;

network_defect  = 3;

m_0_apriori     = 1;
m_0_aposteriori = 1.0163;
sum_of_squares  = 28.9203;


% Fixed points' ids are stored in a cell array of the size n x 1
%
% Corresponding coordinates are stored in the matrix FixedXYZ, where
% first two columns indicate if xy and/or z are available (1 or 0),
% the following three columns contain x, y and z (or zeros if not
% available)
%

FixedPoints = {
};

FixedXYZ = [
];

%  Adjustment information is stored in the following matrix objects
%
%  Points       points' ids (cell array of the size n x 1)
%  Indexes      indexes of adjusted coordinates
%  Constrained  indexes of constrained coordinates (a subset of Indexes)
%  XYZ_0        approximate coordinates (zero if not available)
%  XYZ          ajusted coordinates (zero if not available)
%  C_xx         covariance matrix of adjusted coordinates
%  A            project equation matrix, Ax = b
%  b            rhs of ptoject equations
%  C_ll         covatiance matrix of observations
%  P            weight matrix, P = inv(C_ll)
%  H            matrix of constraints equations (Octave solution)
%  xyzdiff_mm   size of vector of differences between coordinates
%               from Gama and Octave adjustments (if available)
%

Points = {
   '1'
   '2'
   '3'
   '4'
   '5'
   '6'
};

Indexes = [
      2    3    0
     12   13    0
      4    5    0
      6    7    0
      8    9    0
     10   11    0
];

Constrained = [
      2    3    0
     12   13    0
      4    5    0
      6    7    0
      8    9    0
     10   11    0
];

XYZ_0 = [
         1372.487000         564.303000             0
         1370.305000         404.039000             0
         1326.406000         188.227000             0
         1000.000000         607.095000             0
          974.940000         383.413000             0
         1000.000000           0.000000             0
];

XYZ = [
         1372.485743         564.302050             0
         1370.302473         404.038482             0
         1326.403411         188.229032             0
         1000.002477         607.092838             0
          974.942166         383.413044             0
         1000.001730           0.001553             0
];

C_xx = [
  4.3207107e-02  3.3230913e-03 -1.4449930e-02  6.8947625e-03 -1.0635862e-02 ...
  7.2647010e-03 -1.2547361e-02 -5.6878853e-03 -6.9189521e-03 -4.3550134e-03 ...
  1.3449986e-03 -7.4396561e-03;
  3.3230913e-03  2.2362937e-02  2.8515341e-03  2.2698874e-03 -2.1137783e-03 ...
 -3.6605984e-03  5.7998460e-03 -9.3165515e-03  5.3079740e-03 -8.3831628e-03 ...
 -1.5168667e-02 -3.2725122e-03;
 -1.4449930e-02  2.8515341e-03  4.6074242e-02 -3.5816167e-04 -7.0041931e-03 ...
  5.5899222e-03 -9.2171690e-03 -9.3150033e-03 -1.6718650e-03 -6.0832869e-03 ...
 -1.3731085e-02  7.3149956e-03;
  6.8947625e-03  2.2698874e-03 -3.5816167e-04  1.5180334e-02 -1.0372156e-03 ...
  1.6387408e-03  4.3882581e-03 -8.1046591e-03  2.5559413e-03 -7.7059368e-03 ...
 -1.2443585e-02 -3.2783658e-03;
 -1.0635862e-02 -2.1137783e-03 -7.0041931e-03 -1.0372156e-03  5.1997496e-02 ...
 -9.0088844e-03 -7.4100042e-03 -5.1386946e-03 -1.2579613e-03 -3.4563514e-03 ...
 -2.5689475e-02  2.0754924e-02;
  7.2647010e-03 -3.6605984e-03  5.5899222e-03  1.6387408e-03 -9.0088844e-03 ...
  2.2424678e-02  4.1227923e-03 -7.0066615e-03 -1.1441456e-03 -6.5328048e-03 ...
 -6.8243855e-03 -6.8633542e-03;
 -1.2547361e-02  5.7998460e-03 -9.2171690e-03  4.3882581e-03 -7.4100042e-03 ...
  4.1227923e-03  3.7781133e-02 -7.4347098e-05 -1.4527808e-02 -1.4424995e-03 ...
  5.9212094e-03 -1.2794050e-02;
 -5.6878853e-03 -9.3165515e-03 -9.3150033e-03 -8.1046591e-03 -5.1386946e-03 ...
 -7.0066615e-03 -7.4347098e-05  3.8872035e-02 -2.9669660e-03  1.4555428e-02 ...
  2.3182896e-02 -2.8999592e-02;
 -6.9189521e-03  5.3079740e-03 -1.6718650e-03  2.5559413e-03 -1.2579613e-03 ...
 -1.1441456e-03 -1.4527808e-02 -2.9669660e-03  4.2623205e-02 -6.2127611e-03 ...
 -1.8246619e-02  2.4599573e-03;
 -4.3550134e-03 -8.3831628e-03 -6.0832869e-03 -7.7059368e-03 -3.4563514e-03 ...
 -6.5328048e-03 -1.4424995e-03  1.4555428e-02 -6.2127611e-03  2.8542928e-02 ...
  2.1549912e-02 -2.0476452e-02;
  1.3449986e-03 -1.5168667e-02 -1.3731085e-02 -1.2443585e-02 -2.5689475e-02 ...
 -6.8243855e-03  5.9212094e-03  2.3182896e-02 -1.8246619e-02  2.1549912e-02 ...
  5.0400970e-02 -1.0296172e-02;
 -7.4396561e-03 -3.2725122e-03  7.3149956e-03 -3.2783658e-03  2.0754924e-02 ...
 -6.8633542e-03 -1.2794050e-02 -2.8999592e-02  2.4599573e-03 -2.0476452e-02 ...
 -1.0296172e-02  6.2890275e-02;
];

tmp = [   % project matrix nonzero elements (row, col, val)
  1 1 -1.0000000000000000e+00
  1 3 2.0435195868370226e-01
  1 2 -1.6677560646238467e+00
  1 5 -2.0435195868370226e-01
  1 4 1.6677560646238467e+00
  2 1 -1.0000000000000000e+00
  2 3 1.6868433235329188e+00
  2 2 1.9378770131741668e-01
  2 7 -1.6868433235329188e+00
  2 6 -1.9378770131741668e-01
  3 1 -1.0000000000000000e+00
  3 3 1.3266927037652256e+00
  3 2 -6.0366558717357055e-01
  3 9 -1.3266927037652256e+00
  3 8 6.0366558717357055e-01
  4 1 -1.0000000000000000e+00
  4 3 5.1868035719372718e-01
  4 2 -7.8578012549563181e-01
  4 11 -5.1868035719372718e-01
  4 10 7.8578012549563181e-01
  5 3 9.9990732829202134e-01
  5 2 1.3613773463368542e-02
  5 13 -9.9990732829202134e-01
  5 12 -1.3613773463368542e-02
  6 3 9.9257655387421762e-01
  6 2 1.2162148124070173e-01
  6 5 -9.9257655387421762e-01
  6 4 -1.2162148124070173e-01
  7 3 -1.1413118765071406e-01
  7 2 9.9346568738202401e-01
  7 7 1.1413118765071406e-01
  7 6 -9.9346568738202401e-01
  8 3 4.1415740173445159e-01
  8 2 9.1020527717024802e-01
  8 9 -4.1415740173445159e-01
  8 8 -9.1020527717024802e-01
  9 3 8.3457743480610291e-01
  9 2 5.5089064732709436e-01
  9 11 -8.3457743480610291e-01
  9 10 -5.5089064732709436e-01
  10 14 -1.0000000000000000e+00
  10 13 -5.4073242876745725e-02
  10 12 3.9715830414292936e+00
  10 3 5.4073242876745725e-02
  10 2 -3.9715830414292936e+00
  11 14 -1.0000000000000000e+00
  11 13 5.7620314768709691e-01
  11 12 -2.8326739494896738e+00
  11 5 -5.7620314768709691e-01
  11 4 2.8326739494896738e+00
  12 14 -1.0000000000000000e+00
  12 13 1.3217467294500127e+00
  12 12 7.2477715368466988e-01
  12 7 -1.3217467294500127e+00
  12 6 -7.2477715368466988e-01
  13 14 -1.0000000000000000e+00
  13 13 1.6058371728547394e+00
  13 12 -8.3775745266529852e-02
  13 9 -1.6058371728547394e+00
  13 8 8.3775745266529852e-02
  14 14 -1.0000000000000000e+00
  14 13 7.8483500254199468e-01
  14 12 -8.5633180646241569e-01
  14 11 -7.8483500254199468e-01
  14 10 8.5633180646241569e-01
  15 13 9.7993219776170992e-01
  15 12 1.9933110090978026e-01
  15 5 -9.7993219776170992e-01
  15 4 -1.9933110090978026e-01
  16 13 -4.8080624450093024e-01
  16 12 8.7682686731698167e-01
  16 7 4.8080624450093024e-01
  16 6 -8.7682686731698167e-01
  17 13 5.2098665040510375e-02
  17 12 9.9864194239026272e-01
  17 9 -5.2098665040510375e-02
  17 8 -9.9864194239026272e-01
  18 13 7.3721238029440583e-01
  18 12 6.7566108837245931e-01
  18 11 -7.3721238029440583e-01
  18 10 -6.7566108837245931e-01
  19 15 -1.0000000000000000e+00
  19 5 -2.0435195868370135e-01
  19 4 1.6677560646238467e+00
  19 3 2.0435195868370135e-01
  19 2 -1.6677560646238467e+00
  20 15 -1.0000000000000000e+00
  20 5 -5.7620314768709591e-01
  20 4 2.8326739494896742e+00
  20 13 5.7620314768709591e-01
  20 12 -2.8326739494896742e+00
  21 15 -1.0000000000000000e+00
  21 5 7.3688985950771635e-01
  21 4 9.4563084524266772e-01
  21 7 -7.3688985950771635e-01
  21 6 -9.4563084524266772e-01
  22 15 -1.0000000000000000e+00
  22 5 1.3843707724651173e+00
  22 4 7.6880777541604706e-01
  22 9 -1.3843707724651173e+00
  22 8 -7.6880777541604706e-01
  23 15 -1.0000000000000000e+00
  23 5 1.4636620628287567e+00
  23 4 -8.4404306017679886e-01
  23 11 -1.4636620628287567e+00
  23 10 8.4404306017679886e-01
  24 5 -7.8878627463590034e-01
  24 4 6.1466756295254266e-01
  24 7 7.8878627463590034e-01
  24 6 -6.1466756295254266e-01
  25 5 -4.8550438195624362e-01
  25 4 8.7423423354458374e-01
  25 9 4.8550438195624362e-01
  25 8 -8.7423423354458374e-01
  26 5 4.9955487379681990e-01
  26 4 8.6628224503671047e-01
  26 11 -4.9955487379681990e-01
  26 10 -8.6628224503671047e-01
  27 16 -1.0000000000000000e+00
  27 7 -1.6868433235329188e+00
  27 6 -1.9378770131741688e-01
  27 3 1.6868433235329188e+00
  27 2 1.9378770131741688e-01
  28 16 -1.0000000000000000e+00
  28 7 -1.3217467294500125e+00
  28 6 -7.2477715368467011e-01
  28 13 1.3217467294500125e+00
  28 12 7.2477715368467011e-01
  29 16 -1.0000000000000000e+00
  29 7 -7.3688985950771579e-01
  29 6 -9.4563084524266805e-01
  29 5 7.3688985950771579e-01
  29 4 9.4563084524266805e-01
  30 16 -1.0000000000000000e+00
  30 7 3.1490672760572064e-01
  30 6 -2.8108127152555054e+00
  30 9 -3.1490672760572064e-01
  30 8 2.8108127152555054e+00
  31 16 -1.0000000000000000e+00
  31 7 1.9263073320581008e-16
  31 6 -1.0486328702552012e+00
  31 11 -1.9263073320581008e-16
  31 10 1.0486328702552012e+00
  32 7 9.9378265353395456e-01
  32 6 1.1133749384197586e-01
  32 9 -9.9378265353395456e-01
  32 8 -1.1133749384197586e-01
  33 17 -1.0000000000000000e+00
  33 9 -1.3266927037652254e+00
  33 8 6.0366558717357088e-01
  33 3 1.3266927037652254e+00
  33 2 -6.0366558717357088e-01
  34 17 -1.0000000000000000e+00
  34 9 -1.6058371728547391e+00
  34 8 8.3775745266530449e-02
  34 13 1.6058371728547391e+00
  34 12 -8.3775745266530449e-02
  35 17 -1.0000000000000000e+00
  35 9 -1.3843707724651171e+00
  35 8 -7.6880777541604783e-01
  35 5 1.3843707724651171e+00
  35 4 7.6880777541604783e-01
  36 17 -1.0000000000000000e+00
  36 9 -3.1490672760572092e-01
  36 8 2.8108127152555054e+00
  36 7 3.1490672760572092e-01
  36 6 -2.8108127152555054e+00
  37 17 -1.0000000000000000e+00
  37 9 -1.0806279075724418e-01
  37 8 -1.6533391377736406e+00
  37 11 1.0806279075724418e-01
  37 10 1.6533391377736406e+00
  38 9 9.9787083305019786e-01
  38 8 -6.5221166408645129e-02
  38 11 -9.9787083305019786e-01
  38 10 6.5221166408645129e-02
  39 18 -1.0000000000000000e+00
  39 11 -5.1868035719372663e-01
  39 10 7.8578012549563203e-01
  39 3 5.1868035719372663e-01
  39 2 -7.8578012549563203e-01
  40 18 -1.0000000000000000e+00
  40 11 -7.8483500254199468e-01
  40 10 8.5633180646241580e-01
  40 13 7.8483500254199468e-01
  40 12 -8.5633180646241580e-01
  41 18 -1.0000000000000000e+00
  41 11 -1.4636620628287564e+00
  41 10 8.4404306017679931e-01
  41 5 1.4636620628287564e+00
  41 4 -8.4404306017679931e-01
  42 18 -1.0000000000000000e+00
  42 11 -6.4210244401936696e-17
  42 10 1.0486328702552012e+00
  42 7 6.4210244401936696e-17
  42 6 -1.0486328702552012e+00
  43 18 -1.0000000000000000e+00
  43 11 1.0806279075724437e-01
  43 10 1.6533391377736406e+00
  43 9 -1.0806279075724437e-01
  43 8 -1.6533391377736406e+00
];

A = sparse(tmp(:,1), tmp(:,2), tmp(:,3));
clear tmp

tmp = [
1 1 9.5259868922420363e+00
2 2 9.5259868922420363e+00
3 3 9.5259868922420363e+00
4 4 9.5259868922420363e+00
5 5 4.0000000000000008e-02
6 6 1.6000000000000003e-01
7 7 1.6000000000000003e-01
8 8 1.6000000000000003e-01
9 9 4.8999999999999994e-01
10 10 9.5259868922420363e+00
11 11 9.5259868922420363e+00
12 12 9.5259868922420363e+00
13 13 9.5259868922420363e+00
14 14 9.5259868922420363e+00
15 15 4.0000000000000008e-02
16 16 1.6000000000000003e-01
17 17 1.6000000000000003e-01
18 18 2.5000000000000000e-01
19 19 9.5259868922420363e+00
20 20 9.5259868922420363e+00
21 21 9.5259868922420363e+00
22 22 9.5259868922420363e+00
23 23 9.5259868922420363e+00
24 24 2.5000000000000000e-01
25 25 1.6000000000000003e-01
26 26 1.6000000000000003e-01
27 27 9.5259868922420363e+00
28 28 9.5259868922420363e+00
29 29 9.5259868922420363e+00
30 30 9.5259868922420363e+00
31 31 9.5259868922420363e+00
32 32 4.0000000000000008e-02
33 33 9.5259868922420363e+00
34 34 9.5259868922420363e+00
35 35 9.5259868922420363e+00
36 36 9.5259868922420363e+00
37 37 9.5259868922420363e+00
38 38 1.6000000000000003e-01
39 39 9.5259868922420363e+00
40 40 9.5259868922420363e+00
41 41 9.5259868922420363e+00
42 42 9.5259868922420363e+00
43 43 9.5259868922420363e+00
];

C_ll = sparse(tmp(:,1), tmp(:,2), tmp(:,3));
clear tmp

b = [
-1.1965306219985198e+01
2.7354268457334996e-01
-7.1920361717290868e-02
7.1920361434574892e-02
-2.5331508956583093e-01
-3.1595518530593836e+00
-3.6552778174723244e+00
-3.6097229455549495e+00
-4.7547443157327507e+00
0.0000000000000000e+00
-2.5359073343069455e-01
1.0228470924553272e+00
-9.7963745705505367e-01
4.6351146810973303e+00
-2.3634621886117202e+00
-5.3658851958289233e+00
-4.9586182517487032e+00
-4.0322515350226240e+00
-5.6812985381111503e+00
-2.1154917799867690e+00
0.0000000000000000e+00
1.3950229068286717e+00
7.9304235372692347e+00
-6.6098372780061254e+00
-4.8674234919303672e+00
-3.3377036065189714e+00
2.9536827576947964e+00
-5.3688474879303589e+00
2.5689718990274244e+00
-2.4976747148388695e-01
0.0000000000000000e+00
-2.1091034619757920e+00
-2.0916917873546481e-01
1.2310321587137878e+00
2.2067998881609030e-01
-5.9802055917680264e-01
0.0000000000000000e+00
-1.4921424761382696e+00
-1.8775691939517856e+00
7.5026793596334755e+00
-1.5376416021026671e+00
0.0000000000000000e+00
2.8173888898454607e+00
];

P = inv(C_ll);           % weight matrix
tmp = [
1 2 1
3 2 -5.6430300000000000e+02
2 3 1
3 3 1.3724870000000001e+03
1 12 1
3 12 -4.0403899999999999e+02
2 13 1
3 13 1.3703050000000001e+03
1 4 1
3 4 -1.8822700000000000e+02
2 5 1
3 5 1.3264059999999999e+03
1 6 1
3 6 -6.0709500000000003e+02
2 7 1
3 7 1.0000000000000000e+03
1 8 1
3 8 -3.8341300000000001e+02
2 9 1
3 9 9.7494000000000005e+02
1 10 1
3 10 -0.0000000000000000e+00
2 11 1
3 11 1.0000000000000000e+03
];

H_rows = 3;

H = sparse(tmp(:,1), tmp(:,2), tmp(:,3), H_rows, unknowns);
clear tmp;

if sprank(H) < H_rows
    error('rank H is less than H_rows, cannot solve normal equations')
end   % should be endif in Octave

Z = zeros(H_rows, H_rows);
z = zeros(H_rows, 1);
N = [A'*P*A H'; H Z];    % normal equations (free network)
n = [A'*P*b ; z];
x = inv(N)*n;            % unknowns and Lagrange multipliers
x = x(1:unknowns);       % reduction to vector of unknowns

% Check adjustment results from netinfo vs. octave

tmp = [
  2.9943507834375476e+00  0
  -1.2567005710787380e+00  1
  -9.4967099465513627e-01  1
  -2.5894138065156458e+00  1
  2.0321630898468657e+00  1
  2.4766225244331883e+00  1
  -2.1615796391947431e+00  1
  2.1662878283836640e+00  1
  4.4005839499989929e-02  1
  1.7300099395391515e+00  1
  1.5531003720354128e+00  1
  -2.5268059147616202e+00  1
  -5.1801866753238923e-01  1
  -2.2165530755101552e+00  0
  -8.5291852258010459e-01  0
  -8.1745074333497314e-01  0
  -6.8695933918756347e-01  0
  -1.6610664471061520e-01  0
];

tmp = (tmp(:,1) - x).*tmp(:,2)*1000;
xyzdiff_mm = norm(tmp); clear tmp;

if xyzdiff_mm > 1e-3
    error('xyzdiff_mm > 1e-3')
end

%% Statistical tests

% 1. test for reference standard deviation
fprintf('\nStatistical test on reference standard deviation\n\n');
pconf = 0.95;
dof = observations-unknowns+network_defect;
chiCriticalLow = sqrt(chi2inv((1-pconf)/2, dof)/dof);
chiCriticalHigh = sqrt(chi2inv((1+pconf)/2, dof)/dof);
fprintf('Ratio m0'' aposteriori / m0 apriori: %.4f\n', m_0_aposteriori/m_0_apriori);
if m_0_aposteriori <= chiCriticalHigh & m_0_aposteriori >= chiCriticalLow
  verdict = 'contains';
else
  verdict = 'does not contain';
end
fprintf('%.0f%% interval (%.4f, %.4f) %s value m0''/m0\n', 100*pconf, chiCriticalLow, chiCriticalHigh, verdict);


% 2. test for outliers
Qxx = inv(N);
Qxx = Qxx(1:unknowns, 1:unknowns);
QUU = A*Qxx*A';
Qvv = C_ll - QUU;

% residuals
v = full(A*x-b);
% conversion of cc to arcsec
cc2sec = 3600/11111;
% standardize
vstd = abs(v./(m_0_aposteriori*sqrt(diag(Qvv))));

% data snooping
pconf = 0.95;  % confidence level
alpha = (1-pconf)/2;
% critical value of tau distribution (Pope, 1976)
pkg load statistics % for Octave; for Matlab, use Statistics Toolbox
f = observations-unknowns+network_defect;
t = tinv(alpha, f-1);
cstud = @(t,f) sqrt(f*t^2/(f-1+t^2));
cval = cstud(t,f);
fprintf('\nstudentized residuals that exceeds critical value %.4f are marked with c\n', cval);
fprintf('  i    v [ss]      v''\n');
for i = 1:observations
  if vstd(i) > cval
    mark = ' c';
  else
    mark = '';
  end
  fprintf('%3d%10.4f%10.4f%s\n', i, cc2sec*v(i), vstd(i), mark);
end  

